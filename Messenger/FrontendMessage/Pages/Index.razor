@page "/"
@using Pingo.Messages.Entity

@inject HttpClient Http

<PageTitle>Chat</PageTitle>

<MudList T="Message">
    @if (Messages != null)
    {
        foreach (var message in Messages)
        {
            <MudListItem>@(message.UpdatedAt?.ToString("HH:mm") ?? message.SentAt.ToString("HH:mm")) @message.Text</MudListItem>
        }
    }
</MudList>

<MudTextField @bind-Value="NewMessage" Label="Введите сообщение" />
<MudButton OnClick="SendMessage" type="button">Send</MudButton>

@code {
	private List<Message>? Messages = new();
	private string NewMessage = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		Messages = await Http.GetFromJsonAsync<List<Message>>("api/Messages");
	}

	private async Task SendMessage()
	{
		if (!string.IsNullOrWhiteSpace(NewMessage))
        {
            var messageId = Guid.NewGuid();
            await Http.PutAsJsonAsync($"api/Messages/{messageId}", new Message(Id: messageId, Text: NewMessage, SentAt: TimeProvider.System.GetUtcNow(), UpdatedAt: null));
			NewMessage = string.Empty;

			Messages = await Http.GetFromJsonAsync<List<Message>>("api/Messages");
		}
	}

    

}

<style>
    .chat-container {
        max-width: 500px;
        margin: auto;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .chat-box {
        height: 300px;
        overflow-y: auto;
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 10px;
        background: #f9f9f9;
    }

    .chat-messages {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .chat-message {
        padding: 5px;
        background: #e3f2fd;
        border-radius: 5px;
    }

    .chat-input-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .chat-input {
        display: flex;
        gap: 10px;
    }

    .chat-textfield {
        flex-grow: 1;
    }
</style>
